{"version":3,"sources":["components/DataInput.js","components/Editor.js","App.js","reportWebVitals.js","index.js"],"names":["SheetJSFT","map","x","join","DataInput","handleFile","disableState","fileInput","useRef","handleChange","useCallback","e","files","target","Button","className","onClick","current","click","disabled","ref","type","hidden","accept","onChange","Editor","initialValue","htmlViewState","useState","content","setContent","styleEditor","useMemo","display","styleDiv","wordWrap","width","dangerouslySetInnerHTML","__html","style","value","config","readonly","buttons","onBlur","newContent","innerHTML","appbarStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","contentStyles","paddingTop","textfield","color","palette","text","secondary","colunmnButton","primary","App","TAB_STATE","HTML_TAB_ID","PDF_TAB_ID","EDIT_TAB_ID","colData","setColData","chooseTab","setChooseTab","appClasses","contentClasses","addRowCount","d","id","uuid","addRowsFromExcel","excelData","key","excelDataRow","onTABClick","targetId","onPrintDocument","input","document","getElementById","html2canvas","then","canvas","imgHeight","height","imgData","toDataURL","pdf","jsPDF","addImage","save","onDownloadHTML","doc","implementation","createHTMLDocument","styles","getElementsByTagName","newDiv","createElement","newStyle","styleContent","head","appendChild","body","tempEl","href","encodeURIComponent","documentElement","download","file","reader","FileReader","rABS","readAsBinaryString","onload","result","wb","XLSX","read","wsname","SheetNames","ws","Sheets","data","utils","sheet_to_json","header","readAsArrayBuffer","Container","AppBar","position","Toolbar","Typography","variant","ButtonGroup","IconButton","aria-label","Grid","container","item","xs","Card","CardContent","elevation","padding","sm","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c3d1faa8.chunk.js","sourcesContent":["import React, {useRef, useCallback} from 'react';\r\nimport { Button } from '@material-ui/core';\r\n\r\nconst DataInput = ({handleFile, disableState}) => {\r\n  const fileInput = useRef();\r\n\r\n  const handleChange = useCallback((e) => {\r\n    const files = e.target.files;\r\n    if (files && files[0]) handleFile(files[0]);\r\n  }, [handleFile]);\r\n\r\n  return (\r\n    <>\r\n      <Button className=\"import-file-button\" onClick={() => fileInput.current.click()} disabled={disableState}> Import File </Button>\r\n      <input\r\n        ref={fileInput}\r\n        type=\"file\"\r\n        hidden\r\n        accept={SheetJSFT}\r\n        onChange={handleChange}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nconst SheetJSFT = [\r\n  \"xlsx\",\r\n  \"xlsb\",\r\n  \"xlsm\",\r\n  \"xls\",\r\n  \"xml\",\r\n  \"csv\",\r\n  \"txt\",\r\n  \"ods\",\r\n  \"fods\",\r\n  \"uos\",\r\n  \"sylk\",\r\n  \"dif\",\r\n  \"dbf\",\r\n  \"prn\",\r\n  \"qpw\",\r\n  \"123\",\r\n  \"wb*\",\r\n  \"wq*\",\r\n  \"html\",\r\n  \"htm\"\r\n]\r\n  .map(function(x) {\r\n    return \".\" + x;\r\n  })\r\n  .join(\",\");\r\n\r\nexport default DataInput;","import React, {useState, useMemo} from 'react';\r\nimport JoditEditor from \"jodit-react\";\r\n\r\nconst Editor = ({initialValue, htmlViewState}) => {\r\n  const [content, setContent] = useState(initialValue);\r\n\r\n\tconst config = {\r\n    readonly: false, // all options from https://xdsoft.net/jodit/doc/\r\n    buttons: ['source']\r\n  }\r\n\r\n  const styleEditor = useMemo(() => htmlViewState ? {display: 'none'} : {}, [htmlViewState]);\r\n  const styleDiv = useMemo(() => htmlViewState ? {wordWrap: 'break-word', width: '100%'} : {display: 'none'}, [htmlViewState]);\r\n\r\n  return (\r\n    <div className=\"text-editor\">\r\n      <div dangerouslySetInnerHTML={{__html: content}} style={styleDiv}/>\r\n      <div style={styleEditor}>\r\n        <JoditEditor\r\n          value={content}\r\n          config={config}\r\n          onBlur={newContent => setContent(newContent.target.innerHTML)}\r\n          />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Editor","import React, { useState, useCallback, useMemo } from 'react';\r\nimport { uuid } from 'lodash-uuid';\r\n\r\nimport jsPDF from 'jspdf';\r\nimport html2canvas from 'html2canvas';\r\n// Material UI\r\nimport {\r\n  Container,\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  IconButton,\r\n  makeStyles,\r\n  Button,\r\n  Grid,\r\n  ButtonGroup\r\n} from '@material-ui/core';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\n// Material UI\r\nimport PictureAsPdf from '@material-ui/icons/PictureAsPdf';\r\nimport SubjectOutlinedIcon from '@material-ui/icons/SubjectOutlined';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport XLSX from \"xlsx\";\r\nimport DataInput from './components/DataInput';\r\nimport Editor from './components/Editor';\r\n\r\nimport './App.css';\r\n\r\nconst appbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nconst contentStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    paddingTop: '40px'\r\n  },\r\n  textfield: {\r\n    width: '100%',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  colunmnButton: {\r\n    color: theme.palette.text.primary,\r\n  },\r\n  spacing: 4\r\n}));\r\n\r\n\r\nfunction App() {\r\n\r\n  const TAB_STATE = useMemo(() => ({\r\n    HTML_TAB_ID: 1,\r\n    PDF_TAB_ID: 2,\r\n    EDIT_TAB_ID: 3\r\n  }), [])\r\n\r\n  const [colData, setColData] = useState([])\r\n  const [chooseTab, setChooseTab] = useState(TAB_STATE.EDIT_TAB_ID)\r\n\r\n  const appClasses = appbarStyles();\r\n  const contentClasses = contentStyles();\r\n\r\n  const addRowCount = useCallback((e) => {\r\n    setColData(d => [...d, {\r\n      id: uuid(),\r\n      content: ''\r\n    }, {\r\n      id: uuid(),\r\n      content: ''\r\n    }, {\r\n      id: uuid(),\r\n      content: ''\r\n    }]);\r\n  }, []);\r\n\r\n  //add rows from an excel file\r\n  const addRowsFromExcel = useCallback((excelData) => {\r\n    for (const key in excelData) {\r\n      const excelDataRow = excelData[key];\r\n      setColData(d => [...d, {\r\n        id: uuid(),\r\n        content: excelDataRow[0] ? `${excelDataRow[0]}` : ''\r\n      }, {\r\n        id: uuid(),\r\n        content: excelDataRow[1] ? `${excelDataRow[1]}` : ''\r\n      }, {\r\n        id: uuid(),\r\n        content: excelDataRow[2] ? `${excelDataRow[2]}` : ''\r\n      }]);\r\n    }\r\n  }, []);\r\n\r\n  //event which tabs are clicked (edit & html)\r\n  const onTABClick = useCallback((targetId) => {\r\n    if (targetId === chooseTab) return;\r\n    setChooseTab(targetId);\r\n  }, [chooseTab])\r\n\r\n  //event which exports as pdf\r\n  const onPrintDocument = useCallback(() => {\r\n    const input = document.getElementById('pdfdiv');\r\n    html2canvas(input)\r\n      .then((canvas) => {\r\n        const imgWidth = 200;\r\n        const imgHeight = canvas.height * imgWidth / canvas.width;\r\n        const imgData = canvas.toDataURL('image/png');\r\n        const pdf = new jsPDF('p', 'mm', 'a4')\r\n        const position = 0;\r\n        pdf.addImage(imgData, 'JPEG', 0, position, imgWidth, imgHeight);\r\n        pdf.save(\"download.pdf\");\r\n      });\r\n  }, []);\r\n\r\n  //event which exports as html\r\n  const onDownloadHTML = useCallback(() => {\r\n    const doc = document.implementation.createHTMLDocument(\"DownloadDoc\");\r\n    const styles = document.getElementsByTagName('style');\r\n    const newDiv = document.createElement('div');\r\n    const newStyle = document.createElement('style');\r\n    newDiv.innerHTML = document.getElementById('pdfdiv').innerHTML;\r\n\r\n    let styleContent = '';\r\n    for (const style of styles) {\r\n      styleContent += style.innerHTML;\r\n    }\r\n\r\n    newStyle.innerHTML = styleContent;\r\n    doc.head.appendChild(newStyle);\r\n    doc.body.appendChild(newDiv);\r\n\r\n    const tempEl = document.createElement('a');\r\n    tempEl.href = 'data:text/plain;charset=utf-8,' + encodeURIComponent(doc.documentElement.innerHTML);\r\n    tempEl.target = '_blank';\r\n    tempEl.download = 'page.html';\r\n    tempEl.click();\r\n  }, []);\r\n\r\n  //event which handles to import an excel file\r\n  const handleFile = useCallback((file) => {\r\n    const reader = new FileReader();\r\n    const rABS = !!reader.readAsBinaryString;\r\n    reader.onload = ({ target: { result } }) => {\r\n      const wb = XLSX.read(result, { type: rABS ? \"binary\" : \"array\" });\r\n      const wsname = wb.SheetNames[0];\r\n      const ws = wb.Sheets[wsname];\r\n      const data = XLSX.utils.sheet_to_json(ws, { header: 1 });\r\n      addRowsFromExcel(data);\r\n    };\r\n    if (rABS) reader.readAsBinaryString(file);\r\n    else reader.readAsArrayBuffer(file);\r\n  }, [addRowsFromExcel]);\r\n\r\n  return (\r\n    <Container>\r\n      <Container className={appClasses.root}>\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <Typography variant=\"h6\" className={appClasses.title}>\r\n              Generate HTML & PDF\r\n            </Typography>\r\n            <ButtonGroup variant=\"contained\" color=\"primary\">\r\n              <DataInput handleFile={handleFile} disableState={chooseTab !== TAB_STATE.HTML_TAB_ID ? false : true}/>\r\n              <Button id={TAB_STATE.EDIT_TAB_ID} onClick={() => onTABClick(TAB_STATE.EDIT_TAB_ID)} >EDIT</Button>\r\n              <Button id={TAB_STATE.HTML_TAB_ID} onClick={() => onTABClick(TAB_STATE.HTML_TAB_ID)} >HTML</Button>\r\n            </ButtonGroup>\r\n            <IconButton color=\"inherit\" aria-label=\"menu\" onClick={onPrintDocument} disabled={chooseTab !== TAB_STATE.HTML_TAB_ID}>\r\n              <PictureAsPdf />\r\n            </IconButton>\r\n            <IconButton color=\"inherit\" aria-label=\"menu\" onClick={onDownloadHTML} disabled={chooseTab !== TAB_STATE.HTML_TAB_ID}>\r\n              <SubjectOutlinedIcon />\r\n            </IconButton>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </Container>\r\n\r\n      <Container className={contentClasses.root}>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n            <Card variant=\"outlined\">\r\n              <CardContent id=\"pdfdiv\" elevation={4} style={{ padding: '20px' }}>\r\n                <Container>\r\n                  <Grid container spacing={2}>\r\n                    {colData.map((item) => (\r\n                      <Grid item xs={4} key={item.id}>\r\n                        <Editor htmlViewState={chooseTab===TAB_STATE.HTML_TAB_ID ? true : false} initialValue={item.content}/>\r\n                      </Grid>\r\n                    ))}\r\n                    {chooseTab === TAB_STATE.EDIT_TAB_ID && (\r\n                      <Grid item sm={12}>\r\n                        <Button variant=\"contained\" color=\"primary\" href=\"#contained-buttons\" onClick={addRowCount}>\r\n                          <AddIcon></AddIcon>Add Column\r\n                        </Button>\r\n                      </Grid>\r\n                    )}\r\n                  </Grid>\r\n                </Container>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}